name: "Wait for Workflow"
description: "Waits for a specific GitHub Actions workflow to start and complete successfully."

inputs:
  workflow:
    description: "Workflow file name (e.g., build.yml) or workflow run ID."
    required: true
  token:
    description: "GitHub token for API authentication (usually secrets.GITHUB_TOKEN)."
    required: true
  sha:
    description: "Commit SHA to match the workflow run (if PR number is not provided)."
    required: false
    default: ${{ github.sha }}
  pr-number:
    description: "Pull request number if the workflow was triggered by a PR."
    required: false
    default: "${{ github.event.pull_request.number || '' }}"
  timeout:
    description: "Maximum time to wait for workflow completion (e.g. 30m, 1h)."
    required: false
    default: 30m
  max-wait:
    description: "Maximum time (in minutes) to wait for the workflow run to start."
    required: false
    default: "10"
  poll-interval:
    description: "Interval (in seconds) between status checks."
    required: false
    default: "10"
  compact:
    description: "Show compact gh run watch output (true/false)."
    required: false
    default: "false"
  verbose:
    description: "Enable verbose logging (true/false)."
    required: false
    default: "false"

outputs:
  conclusion:
    value: ${{ steps.wait.outputs.conclusion }}
  run-id:
    value: ${{ steps.wait.outputs.run-id }}

runs:
  using: "composite"
  steps:
    - name: Wait for workflow to complete
      id: wait
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        WORKFLOW: ${{ inputs.workflow }}
        SHA: ${{ inputs.sha }}
        PR_NUMBER: ${{ inputs.pr-number }}
        TIMEOUT: ${{ inputs.timeout }}
        MAX_WAIT: ${{ inputs.max-wait }}
        POLL_INTERVAL: ${{ inputs.poll-interval }}
        COMPACT: ${{ inputs.compact }}
        VERBOSE: ${{ inputs.verbose }}
      run: |
        set -euo pipefail

        echo "Repository: ${GH_REPO}"
        echo "Workflow: ${WORKFLOW}"
        echo "Commit SHA: ${SHA}"
        echo "PR Number: ${PR_NUMBER:-none}"
        echo ""

        # 1. Determine if WORKFLOW is a run ID or a workflow file name
        if [[ "$WORKFLOW" =~ ^[0-9]+$ ]]; then
          RUN_ID="${WORKFLOW}"
          echo "Using provided workflow run ID: ${RUN_ID}"
        elif [[ "$WORKFLOW" =~ \.ya?ml$ ]]; then
          WORKFLOW_FILE="${WORKFLOW}"
          echo "Using workflow file: ${WORKFLOW_FILE}"
        else
          echo "Error: Invalid 'workflow' input. Please provide either a workflow file (e.g. build.yml) or run ID (numeric)."
          exit 1
        fi

        # 2. Wait for workflow run to be triggered (if RUN_ID not provided)
        if [ -z "${RUN_ID:-}" ]; then
          echo "Waiting for workflow '${WORKFLOW_FILE}' to be triggered..."
          start_time=$(date +%s)

          while true; do
            if [ "${VERBOSE}" = "true" ]; then
              echo "Checking for workflow runs..."
            fi

            if [ -n "${PR_NUMBER:-}" ]; then
              # Filter by PR number
              response=$(gh api "repos/${GH_REPO}/actions/workflows/${WORKFLOW_FILE}/runs" --jq \
                "([.workflow_runs | sort_by(.created_at)[]
                  | select(.event == \"pull_request\")
                  | select(any(.pull_requests[]; .number == ${PR_NUMBER}))
                  | .id] | last)")
            else
              # Filter by SHA
              response=$(gh api "repos/${GH_REPO}/actions/workflows/${WORKFLOW_FILE}/runs" --jq \
                "([.workflow_runs | sort_by(.created_at)[]
                  | select(.head_sha == \"${SHA}\")
                  | .id] | last)")
            fi

            if [ -n "${response}" ] && [ "${response}" != "null" ]; then
              RUN_ID="${response}"
              echo "Detected workflow run: ${RUN_ID}"
              break
            fi

            now=$(date +%s)
            elapsed=$(( (now - start_time) / 60 ))
            if [ "${elapsed}" -ge "${MAX_WAIT}" ]; then
              echo "Timeout: workflow '${WORKFLOW_FILE}' did not start within ${MAX_WAIT} minutes."
              exit 1
            fi

            sleep "${POLL_INTERVAL}"
          done
        fi

        echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"

        # 3. Wait for workflow run to complete
        COMPACT_FLAG=""
        if [ "${COMPACT}" = "true" ]; then
          COMPACT_FLAG="--compact"
        fi

        echo ""
        echo "Waiting for workflow run ${RUN_ID} to complete..."
        echo "Timeout: ${TIMEOUT}, Poll interval: ${POLL_INTERVAL}s"
        echo ""

        set +e
        timeout "${TIMEOUT}" gh run watch "${RUN_ID}" --interval "${POLL_INTERVAL}" ${COMPACT_FLAG} --exit-status
        exit_code=$?
        set -e

        if [ "${exit_code}" -eq 124 ]; then
          echo "Timeout reached: workflow did not complete within ${TIMEOUT}."
          exit 1
        elif [ "${exit_code}" -ne 0 ]; then
          echo "Workflow failed or was cancelled (exit ${exit_code})."
          exit "${exit_code}"
        fi

        # 4. Fetch final status
        conclusion=$(gh api "repos/${GH_REPO}/actions/runs/${RUN_ID}" --jq '.conclusion')
        echo ""
        echo "Workflow completed with conclusion: ${conclusion}"
        echo "conclusion=${conclusion}" >> "$GITHUB_OUTPUT"
