---
name: Build Maven Artifact
description: Build Maven artifact

inputs:
  version-type:
    description: "Version type to release. Can be one of [major, minor, patch]"
    required: true
    default: "patch"
    type: string
  module:
    description: "Module to build == Repository name."
    required: true
    default: ""
    type: string
  ref:
    description: "Branch name to create release from"
    required: false
    default: "main"
    type: string
  maven-args:
    description: "Maven arguments to pass"
    required: false
    default: "-DskipTests=true -Dmaven.javadoc.skip=true -B"
    type: string
  server-id:
    description: "Maven server ID"
    required: false
    default: "github"
    type: string
  java-version:
    description: "Java version to use"
    required: false
    default: "21"
    type: string
  maven-version:
    description: "Maven version"
    required: false
    default: ""
    type: string
  dry-run:
    description: "Dry run flag"
    required: false
    default: "true"
    type: string
  token:
    description: "GitHub token"
    required: true
    default: ""
    type: string
  gpg-private-key:
    description: "GPG private key"
    required: true
    default: ""
    type: string
  gpg-passphrase:
    description: "GPG passphrase"
    required: true
    default: ""
    type: string
  profile:
    description: "Maven profile to use"
    required: false
    default: ""
    type: string
  maven-user:
    description: "Maven user"
    required: false
    default: ""
    type: string
  maven-password:
    description: "Maven password"
    required: false
    default: ""
    type: string
  bump-dependencies-after-release:
    description: "Bump dependencies versions to next snapshot"
    required: false
    default: "false"
    type: string
outputs:
  release-version:
    description: "Release version"
    value: ${{ steps.release.outputs.RELEASE_VERSION }}
runs:
  using: "composite"
  steps:
    - name: "Check inputs"
      run: |
        . ${GITHUB_ACTION_PATH}/action-script.sh
        check_version_type "${{ inputs.version-type }}"
        check_module "${{ inputs.module }}"
        check_token "${{ inputs.token }}"
      shell: bash

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java-version }}
        distribution: "temurin"
        server-id: ${{ inputs.server-id }}
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ inputs.gpg-private-key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
    - name: Set up Maven
      if: ${{ inputs.maven-version != '' }}
      uses: stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1
      with:
        maven-version: ${{ inputs.maven-version }}
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: maven-${{ runner.os }}
        restore-keys: |
          maven-${{ runner.os }}
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        path: ${{ inputs.module }}
        repository: ${{ github.repository_owner }}/${{ inputs.module }}
        token: ${{ inputs.token }}
    - name: Validate Maven groupId policy
      shell: bash
      run: |
        set -euo pipefail

        echo "Scanning all pom.xml files..."
        viol=0

        # exact groupIds that are forbidden (subpackages are allowed)
        forbidden=("org.qubership" "com.netcracker")

        while IFS= read -r pom; do
          gid=$(mvn -q -f "$pom" help:evaluate -Dexpression=project.groupId -DforceStdout 2>/dev/null || true)
          gid_trimmed=$(printf "%s" "$gid" | tr -d '[:space:]')

          if [[ -z "$gid_trimmed" ]]; then
            echo "::warning file=$pom::Failed to determine groupId"
            continue
          fi

          if [[ " ${forbidden[*]} " == *" $gid_trimmed "* ]]; then
            echo "::error file=$pom::Forbidden groupId=$gid_trimmed (only ${gid_trimmed}.* is allowed)"
            viol=1
          else
            echo "OK: $pom => $gid_trimmed"
          fi
        done <<<(find . -name pom.xml -type f -not -path "*/target/*" | sort)

        exit $viol
    - name: "Release"
      id: release
      run: |
        . ${GITHUB_ACTION_PATH}/action-script.sh
        set_release_version
        set_profile
        bump_version_and_build
      shell: bash
      env:
        MAVEN_USERNAME: ${{ inputs.maven-user }}
        MAVEN_PASSWORD: ${{ inputs.maven-password }}
        MODULE: ${{ inputs.module }}
        VERSION_TYPE: ${{ inputs.version-type }}
        MVN_ARGS: ${{ inputs.maven-args }}
        DRY_RUN: ${{ inputs.dry-run }}
        GITHUB_TOKEN: ${{ inputs.token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}
        PROFILE: ${{ inputs.profile }}
    - name: Cleanup
      if: ${{ inputs.dry-run == 'false' && inputs.bump-dependencies-after-release == 'true' }}
      run: |
        rm -rf ${GITHUB_WORKSPACE}/${{ inputs.module }}
      shell: bash
    - name: Checkout
      if: ${{ inputs.dry-run == 'false' && inputs.bump-dependencies-after-release == 'true' }}
      uses: actions/checkout@v4
      with:
        ref: main
        path: ${{ inputs.module }}
        repository: ${{ github.repository_owner }}/${{ inputs.module }}
        token: ${{ inputs.token }}
    - name: "Bump dependencies versions to next snapshot"
      if: ${{ inputs.dry-run == 'false' && inputs.bump-dependencies-after-release == 'true' }}
      run: |
        . ${GITHUB_ACTION_PATH}/action-script.sh
        bump_dependencies_versions
      shell: bash
      env:
        MAVEN_USERNAME: ${{ inputs.maven-user }}
        MAVEN_PASSWORD: ${{ inputs.maven-password }}
        MODULE: ${{ inputs.module }}
        VERSION_TYPE: ${{ inputs.version-type }}
        MVN_ARGS: ${{ inputs.maven-args }}
        DRY_RUN: ${{ inputs.dry-run }}
        GITHUB_TOKEN: ${{ inputs.token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}
        PROFILE: ${{ inputs.profile }}
