---

name: "Charts Values Update Action"
description: "Update helm charts versions in values.yaml file and create a release draft"

inputs:
  release-version:
    description: "Release version"
    required: true
    type: string
  chart-version:
    description: "Chart version. If not provided, the chart version will be set to the release version."
    required: false
    type: string
  config-file:
    description: "Path to the configuration file for updating versions in values.yaml"
    required: true
    type: string
  create-release-branch:
    description: "Create a release branch"
    required: false
    default: "true"
    type: string
  version-replace-method:
    description: "Method to replace version in values.yaml. Can be 'replace' or 'parse'."
    # 'replace' will replace the image version with the release version as is.
    # 'parse' will parse the version string from config file, make variables substitution, prefix/suffix addition."
    required: false
    default: "parse"
    type: string
  working-directory:
    description: "Working directory for the action"
    required: false
    default: "."
    type: string
  package-charts:
    description: "Package helm charts after updating versions"
    required: false
    default: "false"
    type: string
  publish-charts:
    description: "Publish helm charts to the ghcr registry"
    required: false
    default: "false"
    type: string
outputs:
  images-versions:
    description: "Image versions updated in the values.yaml file"
    value: ${{ steps.update-versions.outputs.images-versions }}
  chart-metadata:
    description: "Chart metadata"
    value: ${{ steps.metadata.outputs.metadata }}
runs:
  using: "composite"
  steps:
    - name: "Check release-version is valid Docker image tag"
      id: check-release-version
      run: |
        tag="${{ inputs.release-version }}"
        # Docker tag regex: must be alphanumeric, '.', '_', or '-', and up to 128 characters
        if [[ "$tag" =~ ^[a-zA-Z0-9._-]{1,128}$ ]]; then
            echo "Valid Docker tag"
        else
            echo "::error::Provided release-version: '${{ inputs.release-version }}' isn't a valid Docker tag." >> $GITHUB_STEP_SUMMARY
            echo "Valid Docker tag must be alphanumeric, '.', '_', or '-', and up to 128 characters" >> $GITHUB_STEP_SUMMARY
            echo "Please check the release-version and try again." >> $GITHUB_STEP_SUMMARY
            exit 1
        fi
      shell: bash
    - name: Check configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        charts=$(grep "chart_file: " ${{ inputs.config-file }} | sed "s#^\s*chart_file:\s*##")
        values=$(grep "values_file: " ${{ inputs.config-file }} | sed "s#^\s*values_file:\s*##")
        for f in ${charts} ${values}; do
          if [[ ! -f ${f} ]]; then
            echo "::error::File $f does not exist!"
            echo "Please check configuration in ${{ inputs.config-file }}"
            exit 1
          fi
        done

    - name: "Create release branch"
      if: ${{ inputs.create-release-branch == 'true' }}
      id: create-release-branch
      run: |
        git config --global user.name "qubership-actions[bot]"
        git config --global user.email "qubership-actions[bot]@users.noreply.github.com"
        git checkout -b release-${{ inputs.release-version }}
        git config pull.rebase false
        git pull origin main
        git push --set-upstream origin release-${{ inputs.release-version }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Update chart and images versions"
      id: update-versions
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
        sudo chmod +x "${GITHUB_ACTION_PATH}/image-versions-replace.py"
        ${GITHUB_ACTION_PATH}/image-versions-replace.py \
          --config-file ${{ inputs.config-file }} \
          --release-version ${{ inputs.release-version }} \
          --chart-version ${{ inputs.chart-version || inputs.release-version }} \
          --version-replace-method ${{ inputs.version-replace-method }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Summary"
      run: |
        echo "## Release version ${{ inputs.release-version }}" >> $GITHUB_STEP_SUMMARY
        echo "Chart version ${{ inputs.chart-version || inputs.release-version }}" >> $GITHUB_STEP_SUMMARY
        if [[ -f summary.md ]]; then
          cat summary.md >> $GITHUB_STEP_SUMMARY
          rm -f summary.md
        fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Commit changed files"
      if: ${{ inputs.create-release-branch == 'true' }}
      run: |
        git config --global user.name "qubership-actions[bot]"
        git config --global user.email "qubership-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "release: Set chart and images versions to release ${{ inputs.release-version }}. [skip ci]"
        git push
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Configure helm"
      uses: azure/setup-helm@v4.3.0

    - name: "Package helm charts"
      if: ${{ inputs.package-charts == 'true' }}
      run: |
        charts=$(grep "chart_file: " ${{ inputs.config-file }} | sed "s#^\s*chart_file:\s*##" | xargs dirname)
        for chart in ${charts}; do
          echo "Packaging chart: ${chart}"
          helm package ${chart} --destination ${{ github.workspace }}/.cr-release-packages
        done
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Publish helm charts"
      if: ${{ inputs.publish-charts == 'true' }}
      run: |
        echo '${{ github.token }}' | helm registry login -u '${{ github.repository_owner }}' --password-stdin 'ghcr.io'
        for chart in ${{ github.workspace }}/.cr-release-packages/*.tgz; do
          helm push ${chart} oci://ghcr.io/${{ github.repository }}/
        done
        helm registry logout 'ghcr.io'
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: "Get chart metadata"
      if: ${{ inputs.package-charts == 'true' }}
      id: metadata
      run: |
        charts_metadata=""
        for chart in ${{ github.workspace }}/.cr-release-packages/*.tgz; do
          chart_name=$(helm show chart ${chart} | grep "name: " | sed "s#^\s*name:\s*##" | tr -d '\r')
          chart_version=$(helm show chart ${chart} | grep "version: " | sed "s#^\s*version:\s*##" | tr -d '\r')
          chart_app_version=$(helm show chart ${chart} | grep "appVersion: " | sed "s#^\s*appVersion:\s*##" | tr -d '\r')
          if [[ ${{ inputs.publish-charts }} == 'true' ]]; then
            chart_meta="{\"name\":\"${chart_name}\",\"version\":\"${chart_version}\",\"appVersion\":\"${chart_app_version}\",\"type\":\"application\",\"mime-type\":\"application/vnd.qubership.helm.chart\",\"reference\":\"oci://ghcr.io/${{ github.repository }}/${chart_name}:${chart_version}\"}"
          else
            chart_meta="{\"name\":\"${chart_name}\",\"version\":\"${chart_version}\",\"appVersion\":\"${chart_app_version}\",\"type\":\"application\",\"mime-type\":\"application/vnd.qubership.helm.chart\"}"
          fi
          mkdir -p ./charts_meta
          echo ${chart_meta} > ./charts_meta/${chart_name}-${chart_version}.json
          charts_metadata="${charts_metadata}${chart_meta},"
        done
        charts_metadata=${charts_metadata%,}  # Remove trailing comma
        charts_metadata="{\"charts\":[${charts_metadata}]}"
        echo "metadata=${charts_metadata}" >> $GITHUB_OUTPUT
        echo "metadata=${charts_metadata}" >> $GITHUB_STEP_SUMMARY
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Upload charts meta
      uses: actions/upload-artifact@v4
      with:
        name: charts-meta.json
        path: "./charts_meta/*.json"
