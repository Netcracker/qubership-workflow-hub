---

# The workflow will generate the SBOM file for the repository
# and vulerability scan report for the SBOM file using CycloneDX
# The workflow will run on push to main branch and manually triggered workflows
# The results will be stored in the action artifacts

name: 'CDXGen'
on:
  workflow_dispatch:
    inputs:
      no-cyclone-report:
        description: "Do not generate CycloneDX report"
        required: false
        default: false
        type: boolean
      fetch-license:
        description: "Fetch license information"
        required: false
        default: true
        type: boolean
  push:
    branches:
      - 'main'
permissions:
  contents: read
# env:
#   NO_CYCLONE_REPORT: ${{ inputs.no-cyclone-report && true || false }}
#   FETCH_LICENSE: ${{ inputs.fetch-license && true || false }}
# ${{ x && 'ifTrue' || 'ifFalse'  }}

jobs:
  cdxgen:
    outputs:
      page-url: ${{ steps.cdxgen.outputs.page-url }}
    runs-on: ubuntu-latest
    steps:
      - name: "Input parameters"
        run: |
          if [ "${{ inputs.no-cyclone-report }}" == "true" ]; then
            echo "NO_CYCLONE_REPORT=true" >> $GITHUB_STEP_SUMMARY
            echo "NO_CYCLONE_REPORT=true" >> $GITHUB_ENV
          else
            echo "NO_CYCLONE_REPORT=false" >> $GITHUB_STEP_SUMMARY
            echo "NO_CYCLONE_REPORT=false" >> $GITHUB_ENV
          fi
          if [ "${{ inputs.fetch-license }}" != "false" ]; then
            echo "FETCH_LICENSE=true" >> $GITHUB_STEP_SUMMARY
            echo "FETCH_LICENSE=true" >> $GITHUB_ENV
          else
            echo "FETCH_LICENSE=false" >> $GITHUB_STEP_SUMMARY
            echo "FETCH_LICENSE=false" >> $GITHUB_ENV
          fi

      - name: "cdxgen"
        id: cdxgen
        uses: netcracker/qubership-workflow-hub/actions/cdxgen@main
        with:
          no-cyclone-report: ${{ env.NO_CYCLONE_REPORT }}
          fetch-license: ${{ env.FETCH_LICENSE }}
  deploy-pages:
    if: needs.cdxgen.outputs.page-url != ''
    permissions:
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: cdxgen
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: "Summary"
        run: |
          echo "${{ steps.deployment.outputs.page_url }}cyclondx-report" >> $GITHUB_STEP_SUMMARY
