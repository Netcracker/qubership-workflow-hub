name: On-demand Security Scan (Grype + Trivy)

on:
  workflow_call:
    inputs:
      target:
        description: "Scan part"
        default: "docker"
        type: string
      image:
        description: "Docker image (for docker). By default ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""
        type: string
      only-high-critical:
        description: "Scope only HIGH + CRITICAL"
        required: false
        default: true
        type: boolean
      trivy-scan:
        description: "Trivy scan"
        required: false
        default: true
        type: boolean
      grype-scan:
        description: "Grype scan"
        required: false
        default: true
        type: boolean
      continue-on-error:
        description: "Continue on error"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write
  packages: read

env:
  GRYPE_SEVERITY: "critical"
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  IMAGE: ${{ inputs.image }}
  TARGET: ${{ inputs.target }}

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.vars.outputs.image }}
    steps:
      - name: Define variables
        id: vars
        run: |
          if [ -n "${IMAGE}" ]; then
            echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Scan plan
        env:
          STEPS_IMAGE: ${{ steps.vars.outputs.image }}
        run: |
          echo "Mode: ${TARGET}"
          echo "Image (if docker): ${STEPS_IMAGE}"
          echo "Only high+critical: ${{ inputs['only-high-critical'] }}"
          if [ "${TARGET}" = "docker" ]; then
            echo "   - Docker scan: enabled"
          else
            echo "   - Docker scan: skipped"
          fi
          if [ "${TARGET}" = "source" ]; then
            echo "   - Source scan: enabled"
          else
            echo "   - Source scan: skipped"
          fi

  grype-scan:
    if: ${{ inputs.grype-scan }}
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Login to GHCR (docker target)
        if: ${{ inputs.target == 'docker' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef #v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository (source target)
        if: ${{ inputs.target == 'source' }}
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Grype scan (Docker: High+Critical)"
        if: ${{ inputs.target == 'docker' }}
        id: grype-docker
        uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 #v7
        with:
          image: "${{ needs.init.outputs.image }}"
          output-file: grype.sarif
          fail-build: false
          severity-cutoff: critical
          only-fixed: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: "Grype scan (Source: High+Critical)"
        if: ${{ inputs.target == 'source' }}
        id: grype-source
        uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 #v7
        with:
          path: .
          output-file: grype.sarif
          fail-build: false
          severity-cutoff: critical
          only-fixed: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: Filter Grype SARIF
        if: ${{ inputs.only-high-critical }}
        run: |
          SARIF_FILE=grype.sarif
          jq '. as $input
          | .runs[].results
          |= map(. + {
          security_severity: (
          $input.runs[0].tool.driver.rules[] as $rule
          | select($rule.id == .ruleId)
          | $rule.properties["security-severity"]
          )
          }
          )' "$SARIF_FILE"  > "${SARIF_FILE%.sarif}.sec-sev.sarif"

          jq '.runs[].results |= map(
              select(
                (.security_severity | tonumber) >= 7
              ) | del(.security_severity)
              )' "${SARIF_FILE%.sarif}.sec-sev.sarif" > "${SARIF_FILE%.sarif}.filtered.sarif"

          mv "${SARIF_FILE%.sarif}.filtered.sarif" "$SARIF_FILE"

      - name: Upload Grype SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif

      - name: Upload all scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grype.sarif
          path: grype.sarif

  trivy-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.trivy-scan }}
    needs: [init]
    steps:
      - name: Login to GHCR (docker target)
        if: ${{ inputs.target == 'docker' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef #v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository (source target)
        if: ${{ inputs.target == 'source' }}
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Trivy scan (Docker: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ inputs.target == 'docker' }}
        id: trivy-docker
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #0.33.1
        with:
          image-ref: "${{ needs.init.outputs.image }}"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: trivy.sarif
          format: "sarif"
          ignore-unfixed: true
          limit-severities-for-sarif: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: "Trivy scan (Source: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ inputs.target == 'source' }}
        id: trivy-source
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #0.33.1
        with:
          scan-type: "fs"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: trivy.sarif
          format: "sarif"
          ignore-unfixed: true
          limit-severities-for-sarif: true
        continue-on-error: ${{ inputs.continue-on-error }}

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      - name: Upload all scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy.sarif
          path: trivy.sarif
